Сетевая игра
    Отдельное меню сеть
    Сетевые функции
        Безопасность
            Пароли и др конфиденциальную информацию клиент будет передавать в зашифрованном виде.
            Для шифрования используем ассиметричный алгоритм.
            На сервере храним пару ключей (в конфиге) - сгенерить пару можно один раз в консоли (или каждый раз, когда надо отозвать все ключи)
            Отдельной ручкой передаем клиенту публичную часть, которую он сохранит у себя и будет ей шифровать данные для сервера.
            * Клиент запрашивает ключ при первом обращении к апи сервера, требующих шифрования, если ключа у него еще нет и сохраняет у себя локально.    
        + Настройки подключения (хост, порт, проверка доступности)
        * Регистрация (логин, пароль), при регистраии можно включить опцию "Перенсти настройки текущего локального профиля"
            - если авторизован, перед началом регистрации выйти (сначала спросить)
            - на фрому подставить логин из текущего локального профиля
            - для поля ввода пароля добавить функцию генерации случайного пароля (длиной 8 символов) - в gui.utils есть функция
            - перенести после регистрации имя, картинку, игровые договоренности (статистику не переносим, сетевая статистика с локальной никак не соотносится)
            - после успешной регистрации сразу входить на клиенте (на сервере регистрация тоже сопровождается входом)
            Протокол регистрации:
                к: если авторизован - спросить подтверждение, выйти (с запросом на сервер)
                к: показать форму регистрации, при выборе галки "Использовать текущий локальный профиль" в поле ввода логина подставляем текущий логин
                к: отправляет запрос на регистрацию: логин, пароль в зашифрованном виде, base64 encoded
                с: создает нового пользователя, сразу авторизует его в системе (создает сеанс), возвращает ответ с данными пользователя и ключем сеанса
                к: получает ответ сервера 200 и точно тот же набор данных, что и при авторизации (в том числе сеансовый ключ)
                к: выполняет действия по входу как и при успешном ответе на запрос авторизации (кроме загрузки настроек пользователя с сервера - они все есть локально)
                к: если была установлена галка "Использовать текущий профиль" - отправляет на сервер настройки пользователя из текущего локального профиля
        Вход (логин, пароль)
            - при входе подтягиваятся все настройки профиля с сервера: имя, картинка, игровые договоренности
            - текущий удаленный профиль сохраняем отдельным полем, он будет как бы сам по себе. При локальной игре можно будет выбирать любой из
                доступных (смену профилей не отключаем), а при сетевой используем текущий удаленный (и переключаемся на него при запуске сетевой игры)
            - при входе в локальную БД профилей добавляем сетевой
            - сетевой профиль может быть только один, при входе в другой из текущего автоматически выходим (сначала спросить)
            - помним профиль, с которым вошли (можно сделать галку при входе, запомнить или нет, если нет - то при запуске приложения разлогинивать)
            - уметь обрабатывать ситуацию, когда тебя разлогинило на сервере - выходим локально (это можно делать при первом же запросе в авторизованную зону,
                вернувшем 401 Unauthorized)
            - пароль передаем в зашифрованном виде + base64 encoded
            - при входе вместе с логином / паролем передаем разовый, сгенеренный на лету, ключ симметричного шифрования (зашифрованный публичным ключем с сервера
                + base64)
                сервер при авторизации генерит нам токен входа (просто id сеанса - записи в таблице сеансов, созданный через secrets.token_urlsafe(128),
                длиной 128) и возвращает его зашифрованным переданным одноразовым ключем + base64
                клиент получает этот id сеанса и сохраняет у себя. Его надо бует передава в хедере запросов для авторизованной зоны
        Проверка авторизации
            - во всех ручках, требующих авторизации, в хедере передаем токен, состоящий из id сеанса, который вернет ручка входа и поле с timstamp текущего момента,
                зашифрованные публичным ключем сервера
            - метод проверки авторизации расшифровывает переданный токен, сверяет timstamp с текущим временем (разница не должна превышать 10 сек - 
                но это взято с потолка - непонятно, как это на реальной нагрузке будет работать), потом находит в БД сеанс по токену,
                смотрит, что он не протух, достает пользователя, смотрит, что он не заблокирован и если все ок - продолжаем выполнять запрос.
        выйти (сетевой профиль со всеми данными полностью удаляем из клиента)
        настройки профиля (стандартное окно редактирования профиля, туда добавляем сетевой), только сетевой профиль сохраняем еще и в сеть
            точнее говоря сетевой профиль, с которым вошли, добавляем в локальную БД профилей (с пометкой, что он сетевой), а при выходе удаляем
            - к полю с uid добавить кнопку скопировать в буфер
            - логин переместить вверх
            - добавить кнопку сменить пароль
            - добавить кнопку выйти
            - добавить пометку, что профиль сетевой
            - активировать / деактивировать соотв возможности при выборе сетевого / локального профиля
            - добавить необязательных свойств (пол, что еще пока не придумал)
        удалить аккаунт: выходим, удаляем с сервера
        Создать игру
        Присоединиться к создаваемой
        Просмотр рекордов сетевых игроков (в то же самое окно, которое для локальной, будем загружать таблиу рекордов с сервера)
        Для обеспечения сетевых функций сделать класс клиента к сетевым апи

Интерфейс
    1. Значкам мастей, которые показывают козырь, когда розданы все карты, нужно добавить какой-то свой фон (прям в png),
        потому что на фоне другого бэкграунда их может стать не видно. Или сам объект Lear сделать со своим фиксированным
        цветом фона (что сделать проще и удобнее - если что - его и подобрать быстро можно).
    2. Сделать свой диалог редактирования картинки. Обрезать как показал юзер, масштабирование, как захочет.
        Открывать картинку в квадратике 180 на 180 в исходном ее размере (т.е. так, чтоб был виден тот кусок, который влез).
        Давать юзеру изменять масштаб при прокрутке колесиком мышки и перетаскивать на тот участок, что он хочет видеть.
        И показать пару опций масштабирования - режим aspectRatioMode: метод сохранения масштаба и transformMode: метод фильтрации.
    *3. Добавить подсказки к некоторым параметрам (в хинтах) в окне договоренностей. В премиях/штрафах расписать, как она считается.
    4. Сделать меню хэлп и написать сам хэлп. Там будет описание игры, правила, описание параметров договоренностей,
        что как считается и т.п. Сама форма - просто большое текстовое поле с html-ным описанием.
        В окне настройки договоренностей в заголовке добавить кнопку с вопросиком и открывать по ней хэлп (Может быть еще
            скроллить на раздел с описанием договоренностей).
    +5. Добавить тем оформления.
    6. Поискать наборы колод более высокого качества.
       
Игровой процесс
    1. Сделать показ статистики партии по игрокам в конце игры. Все показатели легко взять из таблицы хода игры. Показатели такие:
        всего конов, из них:
        кол-во сыгранных
        кол-во не сыгранных (это когда не взял заказ), из них
            - кол-во переборов
            - кол-во недоборов
        общее соотношение заказов к взятому
        общее соотношение сыгранных к не сыгранным
        самая большая взятка за игру (кол-во / очков)
        самая большой недобор за игру (кол-во / очков)
        положительный пик (очков)
        отрицательный пик / минимальный пик (0 в начале не учитываем, пока не произойдет первое изменение очков)
        кол-во джокеров
        кол-во сфейлено с джокером на руках (когда не взял заказ, мизер / золото не уитываем - там на джокере сильно не выедешь)
        оценка мизеров: кол-во взяток на мизере, кол-во партий с 0 взяток, кол-во партий, когда взял меньше всех, когда взял больше всех
        оценка золотых: кол-во взяток на золотых, кол-во партий с 0 взяток, кол-во партий, когда взял меньше всех, когда взял больше всех
        оценка темных: всего темных партий, из них сыгранных, кол-во партий в темную в обычных партиях
            - заказано в темую / взято в темную / недоборов в темную
        лобовую из некоторых показателей выкинуть (из всех откуда можно)
        Игровое время партии
        Позже, когда придумаю, как это оценть, добавить такие:
            - суммарная оценка всех раздач за игру (оценка розданных карт в каждой партии, что-то типа сколько хороших, сколько полхих с учетом
              прикрытых неприкрытых и т.д.)
            - кол-во рискованных конов (придумать, как оценивать; сразу показатель: ненулевой заказ на темных партиях и
              любой заказ в темную в обычных партиях +1 к рискованным)
    2. Переработать финальное окно в конце игры.
        Показывать общие итоги игры, которые сейчас, возможно только сдвинуть их куда-то (и может сделать меньше), чтоб место освободить,
        можно переработать их вид.
        Добавить показ игровой статистики из п.1.
        Оставить кнопку показа таблицы записи игры, таблицу записи игры в конце не показывать автоматически.
    3. Сделать уровень риска игрока случайным - при каждом заказе выставляется случайный уровень риска.

Сервер
    - Убрать мой вручную писанный, переделать на современный фреймворк (разве что на aiohttp, а так - пусть будет)
    Добавить класс FileResponse
