import os
import sys
import logging

from datetime import time, timezone
from logging import FileHandler, StreamHandler
from logging.handlers import RotatingFileHandler, TimedRotatingFileHandler

# server
SERVER_NAME = 'Poker game server'
SERVER_VERSION = '1.0.0'

DEBUG = False
LISTEN_ADDR = 'localhost'
LISTEN_PORT = 2100
WORKERS = 2

# database
DATABASE = {
    'host': 'localhost',
    'port': 5432,
    'dbname': 'poker',
    'user': 'user',
    'password': 'pass'
}

DB_CONNECTIONS = {
    'default': {
        'dsn': f"postgresql://{DATABASE['user']}:{DATABASE['password']}@{DATABASE['host']}:{DATABASE['port']}/{DATABASE['dbname']}",
        'min_size': 3,
        'max_size': 10,
    }
}

# Для использования yoyo с psycopg3 (psycopg) нужно в протоколе указать postgresql+psycopg
# для psycopg2 указать протокол просто postgresql://
# протокол - это то что указано перед :// в строке подключения
YOYO_DB_DSN = DB_CONNECTIONS['default']['dsn']

# directories
DOCUMENT_ROOT = os.path.normpath(os.path.join(os.path.expanduser('~'), '.poker', 'server'))
DATA_DIR = os.path.join(DOCUMENT_ROOT, 'data')
FILESTORE_DIR = os.path.join(DATA_DIR, 'files')
LOGS_DIR = os.path.join(DOCUMENT_ROOT, 'logs')

# logging
LOG_LEVEL = logging.DEBUG if DEBUG else logging.INFO

# use: logging.basicConfig(**LOGGING)
# LOGGING = {
#     'filename': None,
#     'level': LOG_LEVEL,
#     'format': '[%(asctime)s] %(levelname).1s  ::  %(message)s',
#     'datefmt': '%Y.%m.%d %H:%M:%S'
# }

# use: logging.config.dictConfig(LOGGING)
LOGGING = {
    'version': 1,
    'loggers': {
        'root': {
            'level': LOG_LEVEL,
            'handlers': ['console', 'timed_rotate']
        }
    },
    'formatters': {
        'generic': {
            'format': '[%(asctime)s] %(levelname).1s  ::  %(message)s',
            'datefmt': '%Y.%m.%d %H:%M:%S'
        }
    },
    'handlers': {
        'console': {
            'class': StreamHandler,
            'formatter': 'generic',
            'stream': sys.stdout
        },
        'file': {
            'class': FileHandler,
            'formatter': 'generic',
            'filename': os.path.join(LOGS_DIR, 'server.log'),
            'mode': 'a',
            'delay': True
        },
        'rotate': {
            'class': RotatingFileHandler,
            'formatter': 'generic',
            'filename': os.path.join(LOGS_DIR, 'server.log'),
            'mode': 'a',
            'delay': True,
            'maxBytes': 1024 * 1024 * 5,
            'backupCount': 30
        },
        'timed_rotate': {
            'class': TimedRotatingFileHandler,
            'formatter': 'generic',
            'filename': os.path.join(LOGS_DIR, 'server.log'),
            'delay': True,
            'when': 'D',
            'interval': 1,
            'utc': True,
            'atTime': time(0, 0, 0, 0, tzinfo=timezone.utc),
            'backupCount': 30
        }
    }
}

# security
SECRET_KEY = 'test_private_key'
ALGORITHM = 'HS256'
ACCESS_TOKEN_EXPIRE_MINUTES = 60 * 24 * 365
RSA_PRIVATE_KEY = ''
RSA_PUBLIC_KEY = ''
